// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Elev.h"
#include "../RobotMap.h"
#include "../Commands/ElevByJoystick.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Elev::Elev() : Subsystem("Elev") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	motor = RobotMap::elevMotor;
	topLmtSw = RobotMap::elevTopLmtSw;
	bottomLmtSw = RobotMap::elevBottomLmtSw;
	hitLmtSw = RobotMap::elevHitLmtSw;
	encoder = RobotMap::elevEncoder;
	brake = RobotMap::elevBrake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	Elev::encoder->Reset();	// Set encoders to zero to start
}
    
void Elev::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ElevByJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

// ------------Raise -------
void Elev::raise(){
	Drive(1, kRaiseSpeed);
}
//------------- Lower ----------
void Elev::lower(){
	Drive(-1, kLowerSpeed);
}

// ------------ Hold ----------
void Elev::hold(){
	Drive(0, kHoldSpeed);
}

// ------------- Stop -----------
void Elev::stop(){
	Elev::motor->Set(0);	// Stop Elevator
}

// =======================================================
//                    Drive by Joystick
// =======================================================
void Elev::joystickDrive(Joystick* joy){
	yAxis = joy->GetY();
	speed = yAxis;

	if (speed > 0){
		// use dead band on raising elevator
		if ((speed > (- kDeadband)) and ((speed < ( kDeadband)))) speed = 0;
		if (speed < (kHoldSpeed * -1)) speed = kHoldSpeed;	// no fall during 0 to hold speed
		Elev::Drive(2, speed * -1);							// Drive Motor routine 2=Joystick Raise
		return;
	}
	if (speed == 0){	// Hold
		// 	scale lowering speed down
		speed = speed *  kLowerConversion;
		Elev::Drive(0, 0);	// Send to drive Motor routine 2=Joystick Raise
		return;
	}
	// Must be < 0 so time to lower --- We need to scale and translate
	speed = speed * kLowerConversion;	// scale lower value
	speed = kHoldSpeed - speed; 		// translate the speed up to the hold point
	Elev::Drive(4, speed);				// Send to drive Motor routine
}

// =========================================================
//                   Main Drive Motor Routine
// =========================================================

void Elev::Drive(int mode, double speed){
	if (Elev::bottomLmtSw->Get() == Elev::kLmtSwPressed){
		Elev::encoder->Reset();			// Set encoders to zero
	}

	// *********************** Holding Elev (Speed == 0) **************************
	if (mode == 0){
		// Are we at bottom
		if (Elev::bottomLmtSw->Get() == Elev::kLmtSwPressed){
				Elev::motor->Set(0);	// Yes so shut off motor
				return;
			}
		else{
			Elev::motor->Set(kHoldSpeed);	// stop Motor
			return;
		}
	}

	// *********************** Lowering Elev (Speed > 0) **************************
	if ((mode == -1) || (mode == 4)){

		// Are we at bottom
		if (Elev::bottomLmtSw->Get() == Elev::kLmtSwPressed){
			Elev::motor->Set(0);
			return;
		}
		// Check to see if we hit something on the way down
//		if (Elev::hitLmtSw->Get() == Elev::kLmtSwNotPressed){
//			Elev::motor->Set(kHoldSpeed);	// Don't lower just hold
//			return;
//		}
		// Were OK to Continue down

//		if ((Elev::getCurrentPosition() <=  kElevSlowFallPosition ) && (speed >  kElevLowerSlowSpeed))
//				speed = kElevLowerSlowSpeed;	// slow down this last little bit before hitting bottom
		Elev::motor->Set(speed);
		return;
	}


	// *********************** Raising Elev (Speed < 0) **************************
	// check to see if we hit the top
	if ((mode == 1) || (mode == 2)){

		if (Elev::topLmtSw->Get() == Elev::kLmtSwPressed){
			// We have hit the top limit switch so hold
			Elev::motor->Set(kHoldSpeed);
			return;
		}
		else{
			// OK to proceed up
			if (speed >  kHoldSpeed ) speed = kHoldSpeed;
			Elev::motor->Set(speed);	// Set motor speed
			return;
		}
	}
}

// ================================================================
//                     Variuos utility routines
// ================================================================

// -------------- Calc Joystick speed ----------
double Elev::CalcJoySpeed(double Axis ){			// Convert joystick value to speed value
	speed = Axis * -1;	// reverse direction for reversed motor

	if (speed < 0){
		// use deadband on raising elevator
		if ((speed > (- kDeadband)) and ((speed < ( kDeadband)))) speed = 0;
	}
	if (speed > 0){
		// 	scale lowering speed down
		speed = speed *  kLowerConversion;
	}
	return speed;
}
// ------------------- Get Position --------------
double Elev::getCurrentPosition(){
	// return(Elev::encoder->GetDistance());
	 currentPosition = (Elev::encoder->GetRaw() * kElevEncoderConst) + kElevBottomHt;
	return currentPosition;;
}

// ---------------------- Get Limit Switch Info ---------------------
bool Elev::getTopLmtSw(){
	return Elev::topLmtSw->Get();
}

bool Elev::getBottomLmtSw(){
	return Elev::bottomLmtSw->Get();
}

bool Elev::getHitLmtSw(){
	return Elev::hitLmtSw->Get();
}

// -------------------------------------------
void Elev::initVariables(){
	Elev::dThrottleAxis = 0;
	Elev::dThrottle = 0;
	Elev::yAxis = 0;
	Elev::speed = 0;
}

// ***************************************************************************
//     The log method puts interesting information to the SmartDashboard.
// ***************************************************************************
void Elev::log(Joystick* joy) {
	// Get and Display Speeds from Joystick Input

//	SmartDashboard::PutNumber("Elev Y-Axis",yAxis);
//	SmartDashboard::PutNumber("Elev Speed",speed);
//	SmartDashboard::PutNumber("Elev Throttle",dThrottle);

	// Display Elevator Sensors
	SmartDashboard::PutNumber("Elev Top LmtSw",Elev::getTopLmtSw());
	SmartDashboard::PutNumber("Elev Bottom LmtSw", Elev::getBottomLmtSw());
	SmartDashboard::PutNumber("Elev Hit LmtSw", Elev::getHitLmtSw());
//	SmartDashboard::PutNumber("Elev Encoder Raw", Elev::encoder->GetRaw());
//	SmartDashboard::PutNumber("Elev Encoder Calc", (Elev::encoder->GetRaw() * 0.006549));
//	SmartDashboard::PutNumber("Elev Encoder Distance",  Elev::encoder->GetDistance());
}
