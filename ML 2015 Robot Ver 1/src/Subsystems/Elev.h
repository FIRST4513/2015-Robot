// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef ELEV_H
#define ELEV_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Elev: public Subsystem {
private:
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
	float dThrottleAxis, dThrottle;
	float yAxis, speed;
	float deadband = 0.05;
	double currentPosition;
	int driveMode  = 0;		// 1=Raise, 0=Hold, -1=Lower, 2=Joystick

	// ******* Constants  *************
	float kDeadband = 0.05;
	float kRaiseSpeed = -0.60;
	float kHoldSpeed = -0.18;
	float kElevLowerSlowSpeed = -0.04;	// just slight back pressure to slow fall
	float kLowerSpeed = 0.0;

	float kLowerConversion = 0.3;		// Y Axis lower speed conversion constant

	float kElevBottomHt = 9.5;			// Distance from top of fork to floor when down
	float kElevEncoderConst = 0.003742;	// Encoder distance per count
	float kElevSlowFallPosition = 15.5;	// Height when need to slow down free fall

	float kConversionConstant = 0.12;
	// Elev encoder distance per pulse equals .003742
	// Elev fork top is at 9.5 inches above ground
	// Elev has about a 42 inch span actually longer

	// ********************************

	void initVariables();

public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SpeedController* motor;
	DigitalInput* topLmtSw;
	DigitalInput* bottomLmtSw;
	DigitalInput* hitLmtSw;
	Encoder* encoder;
	Relay* brake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	bool kLmtSwPressed = true;
	bool kLmtSwNotPressed = false;

	Elev();
	void InitDefaultCommand();
	void raise();
	void lower();
	void hold();
	void stop();

	void joystickDrive(Joystick* joy);		// Drive elevator by joystick
	void Drive(int mode, double speed);
	double CalcJoySpeed(double Axis );			// Convert joystick value to speed value
	void log(Joystick* joy);					// Log data to smart dashboard

	double getCurrentPosition();
	bool getTopLmtSw();
	bool getBottomLmtSw();
	bool getHitLmtSw();
};

#endif
