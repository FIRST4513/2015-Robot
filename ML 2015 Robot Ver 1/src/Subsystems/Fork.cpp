// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Fork.h"
#include "../RobotMap.h"
#include "../Commands/ForkByJoystick.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Fork::Fork() : Subsystem("Fork") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	motor = RobotMap::forkMotor;
	outsideLmtSw = RobotMap::forkOutsideLmtSw;
	insideLmtSw = RobotMap::forkInsideLmtSw;
	contactLeft = RobotMap::forkContactLeft;
	contactRight = RobotMap::forkContactRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Fork::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ForkByJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

// ----------------- Open -----------------
void Fork::open(){				// Start Motor to open forks
	Fork::drive(kOpenSpeed);
}

// ----------------- Close -----------------
void Fork::close(){				// Start Motor to close forks
	Fork::drive(kCloseSpeed);
}

// ----------------- Stop -----------------
void Fork::stop(){				// Stop Motor
	Fork::motor->Set(0);
}

// ----------------- Joystick -------------
void Fork::joystickDrive(Joystick* joy){
	dThrottleAxis = joy->GetThrottle();
	xAxis = joy->GetX();
	speed = xAxis;
	if ((speed > (- kdeadband)) and ((speed < ( kdeadband )))) speed = 0;
	Fork::drive(speed);						// Issue Move
}

// ------------------ Drive ---------------
bool Fork::drive(float speed){				// Speed +1 means Close
	// Drive to CLOSE but we have hit the inner limit switch so stop
	if ((speed < 0) &&
		((Fork::insideLmtSw->Get() == Fork::kLmtSwPressed) ||
		(Fork::contactRight->Get() == Fork::kLmtSwPressed) ||
		(Fork::contactLeft->Get() == Fork::kLmtSwPressed))){
			Fork::motor->Set(0);	// stop Motor
			return false;	// We hit the end done
	}
	// Drive to OPEN but we have hit the outer limit switch so stop
	if ((speed > 0) && (Fork::outsideLmtSw->Get() == Fork::kLmtSwPressed)) {
			Fork::motor->Set(0);
			return false;	//  We hit the end done
	}
	// Everything looks good so go ahead
	Fork::motor->Set(speed);	// Set motor speed
	return true;	// Were still moving
}

// ------------------ Log -------------------
void Fork::log(Joystick* joy){
	// Log data to smart dashboard
//	SmartDashboard::PutNumber("Fork X-Axis", Fork::xAxis);
//	SmartDashboard::PutNumber("Fork Speed", Fork::speed);
	SmartDashboard::PutNumber("Fork Inner LmtSw",  Fork::getInsideLmtSw());
	SmartDashboard::PutNumber("Fork Outer LmtS", Fork::getOutsideLmtSw());
	SmartDashboard::PutNumber("Fork Contact Right Lmt Sw", Fork::getContactRightLmtSw());
	SmartDashboard::PutNumber("Fork Contact Left Lmt Sw", Fork::getContactLeftLmtSw());
}

// -------------- Get Outside LmtSw ------------------
bool Fork::getOutsideLmtSw(){
	return Fork::outsideLmtSw->Get();
}

// -------------- Get Inside LmtSw ------------------
bool Fork::getInsideLmtSw(){
	return Fork::insideLmtSw->Get();
}


// -------------- Get Contact Left LmtSw ------------------
bool Fork::getContactLeftLmtSw(){
	return Fork::contactLeft->Get();
}


// -------------- Get Contact Right LmtSw ------------------
bool Fork::getContactRightLmtSw(){
	return Fork::contactRight->Get();
}

